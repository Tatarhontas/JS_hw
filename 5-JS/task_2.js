"use strict";
// 1. Написать скрипт, переводящий количество байт в нужные единицы
//  bytes => kB Mb Gb Tb
//  16 565 846 bytes (16,6 Mb)
// Результат должен быть округлен до 1 знака после запятой методом .toFixed()
//  1 Kb = 1024 byte
//  1 Mb = 1024 Kb
//  1 Gb = 1024 Mb
//  1 Tb = 1024 Gb

//для себя: length применяется к массивам или строкам для получения их длины
// массив- хранит упорядоченные данные (любой тип) let massiv = [1, 'строка', true, { id: 4 }, null]
// как получить доступ: let first = massiv[0]; - это 1; let second = massiv[1]; - это 'строка' (начинается с 0: 0,1,2,3....)
 
let number = 16565846;
const peremen= ["byte", "Kb", "Mb", "Gb"];                    // peremen - переменная с массивом
let index = 0;                                              // index - переменная (индекс массива 0,1,2,3) счётчик   
while (number >= 1024 && index < peremen.length - 1) {        // длина массива - 4, индекс нач с 0, поэтому последний индекс (3) всегда будет меньше на 1 чем длина
    number /= 1024;                                           // запомнить: number = number / 1024; разделили на 1024, делим дальше пока выполняются условия
    index++                                                   // переходим на след.единицу если всё ещё тру
} console.log(`${number.toFixed(1)} ${peremen[index]}`);
  


// 2. Сделать из "*" в консоли равнобедренный треугольник и ромб

// for (let i = 1; i <= 5; i++) {    // *     // выравнивание по левому краю, нам нужно добавить в строки пробелы
//  console.log("*".repeat(i));      // **    // * становится больше, а пробелов меньше => выравниваем по центру
// }                                 // ***   // учитываем кол-во строк (высота треугольника) и номер строки

let n = 5;
for (let i = 1; i <= n; i++) {        // внешка i- счётчик строки, пробелов и звёзд
let probel = " ".repeat(n - i);       // на каждой итерации пустая строка. чем дальше строка, тем меньше пробелов
let zvezda = "*".repeat(i * 2 - 1);   // * -> по бокам ещё по 1 звезде итого +2 кажд.раз-> Чтобы на 1 строке была 1 звезда, а не 2 вычитаем 1
console.log(probel + zvezda);
}

// ромб- это 2 треугольника
let n = 5;
for (let i = 1; i <= n; i++) {       
let probel = " ".repeat(n - i);       
let zvezda = "*".repeat(i * 2 - 1);
console.log(probel + zvezda);
}
for (let i = n - 1; i > 0; i--) {          // начинаю не с 5ой, а с 4ой строки (чтобы не было две 5ки в середине) и иду в обратную сторону
  let probel = " ".repeat(n - i);          // уменьшаю количество пробелов 
  let zvezda = "*".repeat(i * 2 - 1);      // уменьшаю количество звёзд
console.log(probel + zvezda);
}


// 3.  Вам нужно вывести в консоль числа от 1 до 100.
//    Если число делится без остатка на 3, то выведете в консоль “число - делится на 3”.
//    Если число делится на 5 без остатка, то то выведете в консоль “число - делится на 5”.
//    Если число делится и на 3 и на 5 без остатка, то то выведете в консоль “число - делится и на 3 на 5”.
//    Число 15 делится без остатка на 3 и на 5 -- пример сообщения в консоле.

for (let n = 1; n < 101; n++) {
  if (n % 3 === 0 && n % 5 === 0) {
    console.log(`"Число ${n} делится и на 3 и на 5"`);
  } else if (n % 3 === 0) {
    console.log(`"Число ${n} делится на 3"`);
  } else if (n % 5 === 0) {
    console.log(`"Число ${n} делится на 5"`); }
}

// 4. Написать скрипт, который преобразует любое предложение в camelCase. Первое слово должно начинаться с буквы в нижнем регистре, 
// у остальных -  верхнем. Пример: I am super engineer => iAmSuperEngineer

// для себя: [предложение из слов]
// разбить на слова сплитом
// индекс[0] - всегда слово[0] будет низ toLowerCase
// слова с другими []
// слова[indexWord][indexLetter] слово: 1ая буква верх, остальные низ 
// charAt(0) - обращаюсь к первой букве слова -> сделать её toUpperCase
// slice(1) - не 0, пропускаю 1ую букву -> сделать toLowerCase
// надо пройтись так по всем словам - рекурсия, не забыть написать выход

const str = "I am super engineer";
const wordsArray = str.split(" ");           // ["I" "am" "a" "super" "engineer"]
function camelCase(wordsArray) {
  let result = "";                         // положу сюда результат
  function newWord(index) {
    if (index >= wordsArray.length) { return; }  // выход
       const word = wordsArray[index];              // надоело писать wordsArray[index] каждый раз
    if (index === 0) { result += word.toLowerCase();} 
    else { result += word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();} 
        newWord(index + 1);}                  // повторяем
        newWord(0);                           // вызываю функцию с 1го слова
    return result;} 
    camelCase(wordsArray); 
  


